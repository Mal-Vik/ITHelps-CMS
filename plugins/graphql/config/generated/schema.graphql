input createDrawerleftInput {
  data: DrawerleftInput
}

type createDrawerleftPayload {
  drawerleft: Drawerleft
}

input createDrawerrightInput {
  data: DrawerrightInput
}

type createDrawerrightPayload {
  drawerright: Drawerright
}

input createDrawerrightsubInput {
  data: DrawerrightsubInput
}

type createDrawerrightsubPayload {
  drawerrightsub: Drawerrightsub
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteDrawerleftInput {
  where: InputID
}

type deleteDrawerleftPayload {
  drawerleft: Drawerleft
}

input deleteDrawerrightInput {
  where: InputID
}

type deleteDrawerrightPayload {
  drawerright: Drawerright
}

input deleteDrawerrightsubInput {
  where: InputID
}

type deleteDrawerrightsubPayload {
  drawerrightsub: Drawerrightsub
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

"""Navigation Drawer Left"""
type Drawerleft {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  icon: String!
  link_sub_drawer_left: Boolean!
  to: String
}

input DrawerleftInput {
  name: String!
  icon: String!
  link_sub_drawer_left: Boolean!
  to: String
}

"""Navigation Drawer Right"""
type Drawerright {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  icon: String!
  to: String
  drawer_right_sub: Boolean!
  drawerrightsubs_id(sort: String, limit: Int, start: Int, where: JSON): [Drawerrightsub]
}

input DrawerrightInput {
  name: String!
  icon: String!
  to: String
  drawer_right_sub: Boolean!
  drawerrightsubs_id: [ID]
}

"""Navigation Sub Drawer Right"""
type Drawerrightsub {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  icon: String!
  drawerright_id: Drawerright
}

input DrawerrightsubInput {
  name: String!
  icon: String!
  drawerright_id: ID
}

input editDrawerleftInput {
  name: String
  icon: String
  link_sub_drawer_left: Boolean
  to: String
}

input editDrawerrightInput {
  name: String
  icon: String
  to: String
  drawer_right_sub: Boolean
  drawerrightsubs_id: [ID]
}

input editDrawerrightsubInput {
  name: String
  icon: String
  drawerright_id: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Drawerleft | createDrawerleftPayload | updateDrawerleftPayload | deleteDrawerleftPayload | Drawerright | createDrawerrightPayload | updateDrawerrightPayload | deleteDrawerrightPayload | Drawerrightsub | createDrawerrightsubPayload | updateDrawerrightsubPayload | deleteDrawerrightsubPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createDrawerleft(input: createDrawerleftInput): createDrawerleftPayload
  updateDrawerleft(input: updateDrawerleftInput): updateDrawerleftPayload
  deleteDrawerleft(input: deleteDrawerleftInput): deleteDrawerleftPayload
  createDrawerright(input: createDrawerrightInput): createDrawerrightPayload
  updateDrawerright(input: updateDrawerrightInput): updateDrawerrightPayload
  deleteDrawerright(input: deleteDrawerrightInput): deleteDrawerrightPayload
  createDrawerrightsub(input: createDrawerrightsubInput): createDrawerrightsubPayload
  updateDrawerrightsub(input: updateDrawerrightsubInput): updateDrawerrightsubPayload
  deleteDrawerrightsub(input: deleteDrawerrightsubInput): deleteDrawerrightsubPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  drawerleft(id: ID!): Drawerleft
  drawerlefts(sort: String, limit: Int, start: Int, where: JSON): [Drawerleft]
  drawerright(id: ID!): Drawerright
  drawerrights(sort: String, limit: Int, start: Int, where: JSON): [Drawerright]
  drawerrightsub(id: ID!): Drawerrightsub
  drawerrightsubs(sort: String, limit: Int, start: Int, where: JSON): [Drawerrightsub]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateDrawerleftInput {
  where: InputID
  data: editDrawerleftInput
}

type updateDrawerleftPayload {
  drawerleft: Drawerleft
}

input updateDrawerrightInput {
  where: InputID
  data: editDrawerrightInput
}

type updateDrawerrightPayload {
  drawerright: Drawerright
}

input updateDrawerrightsubInput {
  where: InputID
  data: editDrawerrightsubInput
}

type updateDrawerrightsubPayload {
  drawerrightsub: Drawerrightsub
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
